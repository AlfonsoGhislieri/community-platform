"use strict";(self.webpackChunkoa_docs=self.webpackChunkoa_docs||[]).push([[754],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8792:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i={id:"modules",title:"Modules"},l=void 0,s={unversionedId:"Frontend Development/modules",id:"Frontend Development/modules",isDocsHomePage:!1,title:"Modules",description:"The platform consists of multiple modules which provide the building blocks for app features and core functionality. Examples include howtos, events and research. These modules are designed to be drop-in/drop-out to allow for different combinations of modules to included in specific deployments.",source:"@site/docs/Frontend Development/modules.md",sourceDirName:"Frontend Development",slug:"/Frontend Development/modules",permalink:"/community-platform/Frontend Development/modules",editUrl:"https://github.com/ONEARMY/community-platform/edit/master/documentation/docs/Frontend Development/modules.md",tags:[],version:"current",frontMatter:{id:"modules",title:"Modules"},sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/community-platform/Frontend Development/overview"},next:{title:"Overview",permalink:"/community-platform/Backend Development/BackendOverview"}},d=[{value:"Integrated Module Folder Structure",id:"integrated-module-folder-structure",children:[]},{value:"Adding Routes",id:"adding-routes",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The platform consists of multiple ",(0,a.kt)("em",{parentName:"p"},"modules")," which provide the building blocks for app features and core functionality. Examples include ",(0,a.kt)("em",{parentName:"p"},"howtos"),", ",(0,a.kt)("em",{parentName:"p"},"events")," and ",(0,a.kt)("em",{parentName:"p"},"research"),". These modules are designed to be drop-in/drop-out to allow for different combinations of modules to included in specific deployments."),(0,a.kt)("p",null,"A module can consist of any combination of frontend pages, components, stores, as well as backend db endpoints, methods and triggers. They can import code from shared components folders, common stores and providers (e.g. user, database), but should avoid importing code directly from other modules; if code from another standalone module is required, it is better to try and refactor to a shared reuseable component instead."),(0,a.kt)("h2",{id:"integrated-module-folder-structure"},"Integrated Module Folder Structure"),(0,a.kt)("p",null,"If developing a new module, the proposed simplest structure to include all relevant frontend code in a single directory is a follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\nmodules\n\u251c\u2500\u2500 myModule\n    \u251c\u2500\u2500 components\n        \u251c\u2500\u2500 component_a.tsx\n        \u251c\u2500\u2500 component_b.tsx\n        \u2514\u2500\u2500 index.tsx\n    \u251c\u2500\u2500 myModule.routes.tsx\n    \u251c\u2500\u2500 myModule.store.tsx\n    \u2514\u2500\u2500 index.tsx\n")),(0,a.kt)("h2",{id:"adding-routes"},"Adding Routes"),(0,a.kt)("p",null,"If the module contains routable pages they should be defined in a single routes file, and where possible use lazy loading to define any child routes"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"myModule.routes.tsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Suspense, lazy } from 'react'\nimport { Route, Switch, withRouter } from 'react-router-dom'\nimport { IPageMeta } from 'src/pages/PageList'\n\nconst moduleName = 'myModule'\n\nconst pages: IPageMeta[] = [\n  {\n    component: lazy(() => import('./component_a')),\n    title: 'Component A',\n    description: 'This page displays component a',\n    path: 'component_a',\n    moduleName,\n  },\n]\n\nconst routes = () => (\n  <Suspense fallback={<div></div>}>\n    <Switch>\n      {pages.map(page => (\n        <Route\n          key={page.path}\n          path={`/${moduleName}/${page.path}`}\n          component={page.component}\n        />\n      ))}\n    </Switch>\n  </Suspense>\n)\n\nexport default withRouter(routes)\n")),(0,a.kt)("p",null,"With the module routes defined they can be imported into the main PageList to be made available in the platform"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"src\\pages\\PageList.tsx")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import MyModule from 'src/modules/myModule'\n// ...\nexport const COMMUNITY_PAGES: IPageMeta[] = [\n  // ...\n  MyModule,\n]\n")))}p.isMDXComponent=!0}}]);